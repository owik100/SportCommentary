@page "/manageSports"
@attribute [Authorize(Roles = "Admin")]

@using AutoMapper
@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess
@using SportCommentaryDataAccess.DTO.SportType
@using SportCommentaryDataAccess.Entities
@using SportCommentary.Components

@inject ISportTypeService _sportTypeService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IMapper _mapper

@{
    var title = "Zarządzaj sportami";
}
<PageHeaderTitle Title="@title"/>

@if (downloadDataError)
{
        <DownladDataError ErrorMessage="@errorMessage" RefreshPage="/manageSports"/>
}
else if (sportTypes == null)
{
        <MudContainer Class="d-flex justify-center">
            <MudProgressCircular  Color="Color.Primary" Indeterminate="true"/> 
        </MudContainer>
}
else
{
        <MudContainer Fixed="true">
        @if (addNewformHidden)
        {
                    <MudFab Color="Color.Primary" Class="mb-4" StartIcon="@Icons.Material.Filled.Add" @onclick="(()=>ToggleForm(false))" Label="Dodaj nowy" />
        }
        @if (!editformHidden){
            <h1>Edytuj</h1>
             <EditForm Class="mb-4" id="editForm" Model="updateSportTypeModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
                   <MudCardContent>
                       <MudTextField Label="Nazwa sportu" @bind-Value="updateSportTypeModel.Name" For="@(() => updateSportTypeModel.Name)"/>
                       <MudTextField Label="SportID" @bind-Value="updateSportTypeModel.SportTypeID" For="@(() => updateSportTypeModel.SportTypeID)"/>
                   </MudCardContent>
                   <MudCardActions>
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Label="Zapisz"/>
                               <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" @onclick="(()=>ToggleForm(false))" Label="Anuluj" />
                   </MudCardActions>
               </MudCard>
             </EditForm>
        }
        else
        {
             <EditForm Class="mb-4" id="addForm" Model="createSportTypeModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
                   <MudCardContent>
                       <MudTextField Label="Nazwa sportu" @bind-Value="createSportTypeModel.Name" For="@(() => createSportTypeModel.Name)"/>
                   </MudCardContent>
                   <MudCardActions>
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Label="Zapisz"/>
                               <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" @onclick="(()=>ToggleForm(false))" Label="Anuluj" />
                   </MudCardActions>
               </MudCard>
             </EditForm>
        }

     <MudTable Striped Items="@sportTypes" Hover="true" Breakpoint="Breakpoint.Xs"  Loading="@(sportTypes == null)" LoadingProgressColor="Color.Info">
             <ColGroup>
                 <col style="width: 5%" />
                  <col />
                <col style="width: 250px" />
                </ColGroup>
        <HeaderContent>
            <MudTh>Lp.</MudTh>
            <MudTh>Nazwa</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Lp.">@(GetRowNumber(context))</MudTd>
            <MudTd DataLabel="Nazwa">@context.Name</MudTd>
            <MudTd DataLabel="Akcje">
               <MudButton class="mr-2" Variant="Variant.Filled" @onclick="(()=>EditSport(context.SportTypeID))" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary">Edytuj</MudButton>
               <MudButton Variant="Variant.Filled" @onclick="(()=> DeleteDialog(context.SportTypeID))" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Usuń</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

        @if (sportTypes?.Count == 0)
        {
            <MudText Class="mt-3" hidden=@(!addNewformHidden) Align="Align.Center" Typo="Typo.h4">Brak sportów. Dodaj jakiś!</MudText>
        }
        </MudContainer>

}
@code {
    private List<SportTypeDTO>? sportTypes;
    private bool downloadDataError = false;
    private string errorMessage = "";

    private CreateSportTypeDTO createSportTypeModel = new();
    private UpdateSportTypeDTO updateSportTypeModel = new();
    private bool addNewformHidden = true;
    private bool editformHidden = true;
    private bool isInvalid = false;
    private int? GetRowNumber(object element) =>
        sportTypes?.TakeWhile(x => x != element).Count() + 1;

    protected override async Task OnInitializedAsync()
    {
        await GetSportTypes();
    }


    private async Task GetSportTypes()
    {
        var getAllResponse = await _sportTypeService.GetAllSportTypesAsync();
        if (getAllResponse.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            sportTypes = getAllResponse.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message, true);
    }

    private void HandleBadResult(string errMsg, bool downloadDataErrorP)
    {
        if (downloadDataErrorP)
        {
            errorMessage = errMsg;
            downloadDataError = true;
        }
        else{
            Snackbar.Add(errMsg, Severity.Error);
        }
    }

    private async Task HandleValidSubmit()
    {
        ToggleForm(false);
        var submitRes = await _sportTypeService.AddSportTypeAsync(createSportTypeModel);
        if (submitRes.Success)
        {
            await GetSportTypes();
            Snackbar.Add("Sport został dodany", Severity.Success);
            return;
        }
        HandleBadResult(submitRes.Message, false);
    }

    private void ToggleForm(bool editForm)
    {
        if(editForm){
            editformHidden = !editformHidden;
            addNewformHidden = true;
        }
        else{
            addNewformHidden = !addNewformHidden;
            editformHidden = true;
            if (!addNewformHidden)
            {
                createSportTypeModel = new();
            }
        }

    }

    private async Task DeleteDialog(int Id)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Czy na pewno chcesz usunąć ten sport? Tej operacji nie można cofnąć!.");
        parameters.Add("ButtonText", "Usuń");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DialogTemplate>("Usuń sport", parameters, options);
        var result = await dialog.Result;
        if(!result.Cancelled){
            await HandleDelete(Id);
        }

    }

    private async Task HandleDelete(int Id)
    {
        var deleteRes = await _sportTypeService.DeleteSportType(Id);
        if (deleteRes.Success)
        {
            await GetSportTypes();
            Snackbar.Add("Sport został usunięty", Severity.Success);
            return;
        }
        HandleBadResult(deleteRes.Message, false);
    }

    private async Task EditSport(int Id){
        ToggleForm(true);
        var getModel = await _sportTypeService.GetByIdAsync(Id);
        if (getModel.Success){
            var singeSport = getModel.Data;
            updateSportTypeModel = _mapper.Map<UpdateSportTypeDTO>(singeSport);
            editformHidden = false;
            return;
        }
        HandleBadResult(getModel.Message, false);
        ToggleForm(true);
    }
}
