@page "/manageSports"
@attribute [Authorize(Roles = "Admin")]

@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess
@using SportCommentaryDataAccess.DTO.SportType
@using SportCommentaryDataAccess.Entities

@inject ISportTypeService _sportTypeService

@{
    var title = "Zarządzaj sportami";
    int counter = 0;
}
<PageTitle>@title</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h4">@title</MudText>
<br/>


@if (error)
{
          <p style="color:red">@errorMessage</p>  
}
else if (sportTypes == null)
{
            <p><em>Wczytywanie...</em></p>
}
else
{
        <MudContainer Fixed="true">
        @if (formHidden)
        {
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="ToggleForm" Label="Dodaj nowy" />
        }
        else
        {
             <EditForm id="addForm" Model="createSportTypeModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
                   <MudCardContent>
                       <MudTextField Label="Nazwa sportu" @bind-Value="createSportTypeModel.Name" For="@(() => createSportTypeModel.Name)"/>
                   </MudCardContent>
                   <MudCardActions>
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Label="Zapisz"/>
                       <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" @onclick="ToggleForm" Label="Anuluj" />
                   </MudCardActions>
               </MudCard>
             </EditForm>
        }
                <table class="table mt-4">
                    <thead>
                        <tr>
                            <th style="width:10%;">Lp.</th>
                            <th>Nazwa</th>
                            <th>Akcja</th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                @foreach (var sportType in sportTypes)
                {
                    counter++;
                                <tr>
                                     <td>@counter</td>
                                     <td>@sportType.Name</td>
                                             <td><button class="btn btn-danger" @onclick="(()=> HandleDelete(sportType.SportTypeID))"><i class="fa-solid fa-trash"></i> Usuń</button>

                                </td>
                                </tr>
                }
                    </tbody>
                </table>
        @if (counter == 0)
        {
                        <h4 hidden=@(!formHidden)  class="text-center">Brak sportów. Dodaj jakiś!</h4>
        }
        </MudContainer>

}
@code {
    private List<SportTypeDTO>? sportTypes;
    private bool error = false;
    private string errorMessage = "";

    private CreateSportTypeDTO createSportTypeModel = new();
    private bool formHidden = true;
    private bool isInvalid = false;

    protected override async Task OnInitializedAsync()
    {
        await GetSportTypes();
    }


    private async Task GetSportTypes()
    {
        var getAllResponse = await _sportTypeService.GetAllSportTypesAsync();
        if (getAllResponse.Success)
        {
            error = false;
            sportTypes = getAllResponse.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message);
    }

    private void HandleBadResult(string errMsg)
    {
        error = true;
        errorMessage = errMsg;
    }

    private async Task HandleValidSubmit()
    {
        ToggleForm();
        var submitRes = await _sportTypeService.AddSportTypeAsync(createSportTypeModel);
        if (submitRes.Success)
        {
            await GetSportTypes();
            return;
        }
        HandleBadResult(submitRes.Message);
    }

    private void ToggleForm()
    {
        formHidden = !formHidden;
        if(!formHidden){
            createSportTypeModel = new();
        }
    }


    private async Task HandleDelete(int Id)
    {
        var deleteRes = await _sportTypeService.DeleteSportType(Id);
        if (deleteRes.Success)
        {
            await GetSportTypes();
            return;
        }
        HandleBadResult(deleteRes.Message);
    }
}
