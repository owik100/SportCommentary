@page "/manageSports"
@attribute [Authorize(Roles = "Admin")]

@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess.DTO.SportType
@using SportCommentaryDataAccess.Entities

@inject ISportTypeService _sportTypeService

@{
    var title = "Zarządzaj sportami";
    int counter = 0;
}
<PageTitle>@title</PageTitle>
<h3 class="text-center">@title</h3>


@if (error)
{
      <p>@errorMessage</p>  
}
else if (sportTypes == null)
{
        <p><em>Wczytywanie...</em></p>
}
else
{
        <button class="btn btn-primary mt-3" @onclick="ShowForm"><i class="fa-solid fa-plus"></i> Dodaj nowy</button>
        <table class="table mt-4">
            <thead>
                <tr>
                    <th style="width:10%;">Lp.</th>
                    <th>Nazwa</th>
                </tr>
            </thead>
            <tbody class="table-group-divider">
            @foreach (var sportType in sportTypes)
            {
                counter++;
                <tr>
                     <td>@counter</td>
                     <td>@sportType.Name</td>
                </tr>
            }
            </tbody>
        </table>
    @if (counter == 0)
    {
        <h4 hidden=@(!formHidden)  class="text-center">Brak sportów. Dodaj jakiś!</h4>
    }
}

<EditForm id="addForm" Model="createSportTypeModel" hidden=@formHidden OnValidSubmit="@HandleValidSubmit">
     <DataAnnotationsValidator />
     @*<ValidationSummary />*@

   
    <label for="name">Nazwa sportu</label>
        <InputText id="name" @bind-Value="createSportTypeModel.Name"/>
        &nbsp;<ValidationMessage For="@(() => createSportTypeModel.Name)" />
    <button type="submit" class="btn btn-primary">Zapisz</button>
</EditForm>

@code {
    private List<SportTypeDTO>? sportTypes;
    private bool error = false;
    private string errorMessage = "";

    private CreateSportTypeDTO createSportTypeModel = new();
    private bool formHidden = true;
    private bool isInvalid = false;
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        var getAllResponse = await _sportTypeService.GetAllSportTypesAsync();
        if (!getAllResponse.Success){
            error = true;
            errorMessage = getAllResponse.Message;
        }
        else{
            sportTypes = getAllResponse.Data;
        }

    }

    private async Task HandleValidSubmit()
    {
        await _sportTypeService.AddSportTypeAsync(createSportTypeModel);
    }

    private void ShowForm(){
        formHidden = false;
    }
}
