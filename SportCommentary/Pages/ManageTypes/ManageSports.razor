@page "/manageSports"
@attribute [Authorize(Roles = "Admin")]

@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess
@using SportCommentaryDataAccess.DTO.SportType
@using SportCommentaryDataAccess.Entities

@inject ISportTypeService _sportTypeService
@inject ISnackbar Snackbar

@{
    var title = "Zarządzaj sportami";
    int counter = 0;
}
<PageTitle>@title</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h4">@title</MudText>
<br/>
<SportCommentary.Components.DownladDataError ErrorMessage=@errorMessage RefreshPage="/manageSports"/>
<SportCommentary.Components.DummyComponent/>
  <MudProgressCircular Class="align-center" Color="Color.Primary" Indeterminate="true"/>
 
@if (downloadDataError)
{
        <DownladDataError ErrorMessage="@errorMessage" RefreshPage="/manageSports"/>
}
else if (sportTypes == null)
{
           <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
}
else
{
        <MudContainer Fixed="true">
        @if (formHidden)
        {
            <MudFab Color="Color.Primary" Class="mb-4" StartIcon="@Icons.Material.Filled.Add" @onclick="ToggleForm" Label="Dodaj nowy" />
        }
        else
        {
             <EditForm Class="mb-4" id="addForm" Model="createSportTypeModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
                   <MudCardContent>
                       <MudTextField Label="Nazwa sportu" @bind-Value="createSportTypeModel.Name" For="@(() => createSportTypeModel.Name)"/>
                   </MudCardContent>
                   <MudCardActions>
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Label="Zapisz"/>
                       <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Cancel" @onclick="ToggleForm" Label="Anuluj" />
                   </MudCardActions>
               </MudCard>
             </EditForm>
        }

                    <MudTable Striped Items="@sportTypes" Hover="true" Breakpoint="Breakpoint.Xs"  Loading="@(sportTypes == null)" LoadingProgressColor="Color.Info">
             <ColGroup>
                 <col style="width: 5%" />
                  <col />
                <col style="width: 250px" />
                </ColGroup>
        <HeaderContent>
            <MudTh>Lp.</MudTh>
            <MudTh>Nazwa</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Lp.">@(++counter)</MudTd>
            <MudTd DataLabel="Nazwa">@context.Name</MudTd>
            <MudTd DataLabel="Akcje">
                <MudButton class="mr-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary">Edytuj</MudButton>
                <MudButton Variant="Variant.Filled" @onclick="(()=> HandleDelete(context.SportTypeID))" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Usuń</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

       @*         <table class="table mt-4">
                    <thead>
                        <tr>
                            <th style="width:10%;">Lp.</th>
                            <th>Nazwa</th>
                            <th>Akcja</th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                @foreach (var sportType in sportTypes)
                {
                    counter++;
                                <tr>
                                     <td>@counter</td>
                                     <td>@sportType.Name</td>
                                             <td><button class="btn btn-danger" @onclick="(()=> HandleDelete(sportType.SportTypeID))"><i class="fa-solid fa-trash"></i> Usuń</button>

                                </td>
                                </tr>
                }
                    </tbody>
                </table>*@
        @if (sportTypes?.Count == 0)
        {
            <MudText Class="mt-3" hidden=@(!formHidden) Align="Align.Center" Typo="Typo.h4">Brak sportów. Dodaj jakiś!</MudText>
        }
        </MudContainer>

}
@code {
    private List<SportTypeDTO>? sportTypes;
    private bool downloadDataError = false;
    private string errorMessage = "";

    private CreateSportTypeDTO createSportTypeModel = new();
    private bool formHidden = true;
    private bool isInvalid = false;

    protected override async Task OnInitializedAsync()
    {
        await GetSportTypes();
    }


    private async Task GetSportTypes()
    {
        var getAllResponse = await _sportTypeService.GetAllSportTypesAsync();
        if (getAllResponse.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            sportTypes = getAllResponse.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message, true);
    }

    private void HandleBadResult(string errMsg, bool downloadDataErrorP)
    {
        if (downloadDataErrorP)
        {
            errorMessage = errMsg;
            downloadDataError = true;
        }
        else{
            Snackbar.Add(errMsg, Severity.Error);
        }
    }

    private async Task HandleValidSubmit()
    {
        ToggleForm();
        var submitRes = await _sportTypeService.AddSportTypeAsync(createSportTypeModel);
        if (submitRes.Success)
        {
            await GetSportTypes();
            Snackbar.Add("Sport został dodany", Severity.Success);
            return;
        }
        HandleBadResult(submitRes.Message, false);
    }

    private void ToggleForm()
    {
        formHidden = !formHidden;
        if(!formHidden){
            createSportTypeModel = new();
        }
    }


    private async Task HandleDelete(int Id)
    {
        var deleteRes = await _sportTypeService.DeleteSportType(Id);
        if (deleteRes.Success)
        {
            await GetSportTypes();
            Snackbar.Add("Sport został usunięty", Severity.Success);
            return;
        }
        HandleBadResult(deleteRes.Message, false);
    }
}
