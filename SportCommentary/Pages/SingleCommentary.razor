@page "/commentary/{id}"
@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess.DTO.Commentary
@using SportCommentary.Components
@using SportCommentaryDataAccess.DTO.SingleCommentary
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable


@inject ISnackbar Snackbar
@inject ICommentaryService _commentaryService
@inject ISportTypeService _sportTypeService
@inject ISingleCommentaryService _singleCommentaryService
@inject NavigationManager _navigation

@{
    var title = "Relacja";
}
<PageHeaderTitle Title="@title"/>

@if (downloadDataError)
{
                <DownladDataError ErrorMessage="@errorMessage" RefreshPage="/manageCommentary"/>
}
else if (commentary == null)
{
            <MudContainer Class="d-flex justify-center">
                <MudProgressCircular  Color="Color.Primary" Indeterminate="true"/> 
            </MudContainer>
}
else
{
    <MudContainer Fixed="true">
     <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5">@commentary.Caption</MudText>
            <MudText Typo="Typo.body2">@commentary.Description</MudText>
        </MudCardContent>
    </MudCard>
    </MudContainer>
    <AuthorizeView Roles="Admin">
        <CommentaryLiveAdminPanel commentryId="@id" sportTypeId="@sportTypeId" AddedSingleComment="OnNewAddedSingleComment"/>
    </AuthorizeView>
            <CommentaryLive commentryId="@id" singleComments="@singleComments"/>
}
@code {
    [Parameter]
    public string id { get; set; }

    public string sportTypeId = "";

    private CommentaryDTO? commentary;
    private bool downloadDataError = false;
    private string errorMessage = "";

    private List<SingleCommentDTO>? singleComments;


    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        //HUB
        hubConnection = new HubConnectionBuilder()
          .WithUrl(_navigation.ToAbsoluteUri($"/commentaryhub?commentryId={id}"))
          .Build();

        hubConnection.On<SingleCommentDTO>("ReceiveSingleComment", (newSingleComment) =>
        {
            singleComments?.Insert(0, newSingleComment);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        var allSports = await _sportTypeService.GetAllSportTypesAsync();
        var x = allSports.Data.Where(x => x.Commentaries.Any(y => y.CommentaryID == Convert.ToInt32(id))).Select(z => z.SportTypeID).First();
        sportTypeId = x.ToString();
        var getAllResponse = await _commentaryService.GetByIdAsync(Convert.ToInt32(id));
        if (getAllResponse.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            commentary = getAllResponse.Data;
        }
        else{
            HandleBadResult(getAllResponse.Message, true);
        }

        var getAllResponseSingleComments = await _singleCommentaryService.GetAllSingleCommentsInCommentaryAsync(Convert.ToInt32(id));
        if (getAllResponseSingleComments.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            singleComments = getAllResponseSingleComments.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message, true);
    }

    private void HandleBadResult(string errMsg, bool downloadDataErrorP)
    {
        if (downloadDataErrorP)
        {
            errorMessage = errMsg;
            downloadDataError = true;
        }
        else
        {
            Snackbar.Add(errMsg, Severity.Error);
        }
    }
    private async Task OnNewAddedSingleComment(SingleCommentDTO newSingleComment)
    {
        await SendViaHub(newSingleComment);
    }


    //HUB
    private async Task SendViaHub(SingleCommentDTO newSingleComment)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendSingleComment", newSingleComment);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
