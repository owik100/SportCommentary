@using SportCommentary.Repository.Interfaces
@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess
@using SportCommentaryDataAccess.DTO.Event
@using SportCommentaryDataAccess.DTO.SingleCommentary
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ISingleCommentaryService _singleCommentaryService
@inject IEventService _eventsService


@if (downloadDataError)
{
                        <DownladDataError ErrorMessage="@errorMessage" RefreshPage="/commentary/{id}"/>
}
else if (events == null)
{
                <MudContainer Class="d-flex justify-center">
                    <MudProgressCircular  Color="Color.Primary" Indeterminate="true"/> 
                </MudContainer>
}
else{
<MudContainer Fixed="true" Class="mt-4">
             <EditForm Class="mb-4" id="editForm" Model="createSingleCommentaryModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
               
                     <MudCardContent>
                               <MudText Typo="Typo.h6">Dodaj nowe wydarzenie</MudText>
                               <MudTextField Label="Tytuł" @bind-Value="createSingleCommentaryModel.Title" For="@(() => createSingleCommentaryModel.Title)"/>
                               <MudTextField Lines="4" Label="Opis" @bind-Value="createSingleCommentaryModel.Description" For="@(() => createSingleCommentaryModel.Description)"/>
                                    <MudSelect  Clearable="true" @bind-Value="selectedEventID" T="Int32" Label="Wydarzenie" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var singleEvent in events)
                    {
                                         <MudSelectItem Value="singleEvent.EventID">@singleEvent.Name</MudSelectItem>
                    }
                       </MudSelect>
                       </MudCardContent>
                   <MudCardActions>
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Label="Dodaj"/>
                   </MudCardActions>
               </MudCard>
             </EditForm>
      </MudContainer>
}
@code {
    [Parameter]
    public string commentryId { get; set; }
    [Parameter]
    public string sportTypeId { get; set; }

    private CreateSingleCommentaryDTO createSingleCommentaryModel = new();
    private List<EventDTO>? events;
    private bool downloadDataError = false;
    private string errorMessage = "";

    private int selectedEventID = 0;

    protected override async Task OnInitializedAsync()
    {
        var getAllResponse = await _eventsService.GetAllEventsAsyncBySportType(Convert.ToInt32(sportTypeId));
        if (getAllResponse.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            events = getAllResponse.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message); 
    }

    private void HandleBadResult(string errMsg)
    {
        Snackbar.Add(errMsg, Severity.Error);
    }

    private async Task HandleValidSubmit()
    {
        createSingleCommentaryModel.CommentaryID = Convert.ToInt32(commentryId);
        createSingleCommentaryModel.EventID = selectedEventID;
        createSingleCommentaryModel.Time = DateTime.Now;
        var submitRes = await _singleCommentaryService.AddSingleCommentaryAsync(createSingleCommentaryModel);
        if (submitRes.Success)
        {
            Snackbar.Add("Wydarzenie zostało dodane", Severity.Success);
            return;
        }
        HandleBadResult(submitRes.Message);
    }
}
