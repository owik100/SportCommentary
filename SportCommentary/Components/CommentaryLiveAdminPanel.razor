@using AutoMapper
@using SportCommentary.Repository.Interfaces
@using SportCommentary.Service.Interfaces
@using SportCommentaryDataAccess
@using SportCommentaryDataAccess.DTO.Commentary
@using SportCommentaryDataAccess.DTO.Event
@using SportCommentaryDataAccess.DTO.SingleCommentary
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ISingleCommentaryService _singleCommentaryService
@inject ICommentaryService _commentaryService
@inject IEventService _eventsService
@inject IMapper _mapper

@if (downloadDataError)
{
                        <DownladDataError ErrorMessage="@errorMessage" RefreshPage="/commentary/{id}"/>
}
else if (events == null)
{
                <MudContainer Class="d-flex justify-center">
                    <MudProgressCircular  Color="Color.Primary" Indeterminate="true"/> 
                </MudContainer>
}
else if(!commentryEnded)
{
<MudContainer Fixed="true" Class="mt-4">
             <EditForm Class="mb-4" id="editForm" Model="createSingleCommentaryModel" OnValidSubmit="@HandleValidSubmit">
                       <DataAnnotationsValidator />
               <MudCard>
               
                     <MudCardContent>
                               <MudText Typo="Typo.h6">Dodaj nowe wydarzenie</MudText>
                               <MudTextField Label="Tytuł" @bind-Value="createSingleCommentaryModel.Title" For="@(() => createSingleCommentaryModel.Title)"/>
                               <MudTextField Lines="4" Label="Opis" @bind-Value="createSingleCommentaryModel.Description" For="@(() => createSingleCommentaryModel.Description)"/>

                       <MudChipSet @bind-SelectedChip="selectedEvent" Filter="true">
                    @foreach (var singleEvent in events)
                    {
                                        <MudChip Size="Size.Large" Color="Color.Dark" Variant="Variant.Text" Icon="@singleEvent.Icon" Tag="@singleEvent.EventID" >
                                    <img  src="@singleEvent.Icon">
                                    @singleEvent.Name
                                </MudChip>
                    }
                    </MudChipSet>
                       </MudCardContent>
                   <MudCardActions style="justify-content: space-between;">
                       <MudFab Class="mr-4" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Label="Dodaj"/>
                       <MudFab Class="mr-4"  StartIcon="@Icons.Material.Filled.Done" Variant="Variant.Filled" Color="Color.Secondary" Label="Zakończ relacje" @onclick="() => EndCommentaryDialog()"/>
                   </MudCardActions>
               </MudCard>
             </EditForm>
      </MudContainer>
}
@code {
    [Parameter]
    public string sportTypeId { get; set; }
    [Parameter] 
    public EventCallback<SingleCommentDTO> AddedSingleComment { get; set; }
    [Parameter]
    public EventCallback EndedCommentary { get; set; }
    [Parameter]
    public CommentaryDTO commentary { get; set; }

    private CreateSingleCommentaryDTO createSingleCommentaryModel = new();
    private List<EventDTO>? events;
    private bool downloadDataError = false;
    private string errorMessage = "";
    private MudChip selectedEvent;

    private bool commentryEnded = false;

    protected override async Task OnInitializedAsync()
    {
        var getAllResponse = await _eventsService.GetAllEventsAsyncBySportType(Convert.ToInt32(sportTypeId));
        if (getAllResponse.Success)
        {
            downloadDataError = false;
            errorMessage = "";
            events = getAllResponse.Data;
            return;
        }
        HandleBadResult(getAllResponse.Message); 
    }

    private void HandleBadResult(string errMsg)
    {
        Snackbar.Add(errMsg, Severity.Error);
    }

    private async Task HandleValidSubmit()
    {
        createSingleCommentaryModel.CommentaryID = Convert.ToInt32(commentary.CommentaryID);
        int? selectedEventId = selectedEvent == null ? null : Convert.ToInt32(selectedEvent.Tag);
        createSingleCommentaryModel.EventID = selectedEventId;
        createSingleCommentaryModel.Time = DateTime.Now;
        var submitRes = await _singleCommentaryService.AddSingleCommentaryAsync(createSingleCommentaryModel);
        if (submitRes.Success)
        {
            Snackbar.Add("Wydarzenie zostało dodane", Severity.Success);
            createSingleCommentaryModel = new();
            await AddedSingleComment.InvokeAsync(submitRes.Data);
            return;
        }
        HandleBadResult(submitRes.Message);
    }

    private async Task EndCommentaryDialog(){
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Czy na pewno chcesz zakończyć realcje? Nie będziesz mógł dodawać nowych komentarzy.");
        parameters.Add("ButtonText", "Zakończ");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<DialogTemplate>("Zakończ relacje live", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await EndCommentary();
        }
    }

    private async Task EndCommentary()
    {
        UpdateCommentaryDTO updateCommentaryModel = new UpdateCommentaryDTO();
        updateCommentaryModel = _mapper.Map<UpdateCommentaryDTO>(commentary);
        updateCommentaryModel.IsLive = false;

        var submitRes = await _commentaryService.UpdateCommentaryAsync(updateCommentaryModel);
        if (submitRes.Success)
        {
            Snackbar.Add("Relacja została zakończona", Severity.Success);
            commentryEnded = true;
            await EndedCommentary.InvokeAsync();
            return;
        }
        HandleBadResult(submitRes.Message);
    }
}
