@using SportCommentaryDataAccess.DTO.SportType

  <MudTable Striped Items="@sportTypes" Hover="true" Breakpoint="Breakpoint.Xs"  Loading="@(sportTypes == null)" LoadingProgressColor="Color.Info" Filter="new Func<SportTypeDTO ,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Sporty</MudText>
            <MudSpacer />
                <MudTextField @bind-Value="searchString" Immediate="true" Placeholder="Szukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
             <ColGroup>
                 <col style="width: 5%" />
                  <col />
                <col style="width: 250px" />
                </ColGroup>
        <HeaderContent>
            <MudTh>Lp.</MudTh>
            <MudTh>Nazwa</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Lp.">@(GetRowNumber(context))</MudTd>
                    <MudTd DataLabel="Nazwa">@context.Name</MudTd>
                    <MudTd DataLabel="Akcje">
                           <MudButton class="mr-2" Variant="Variant.Filled" @onclick="(()=> OnEditClick.InvokeAsync(context.SportTypeID))" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary">Edytuj</MudButton>
                           <MudButton Variant="Variant.Filled" @onclick="(()=> OnDeleteClick.InvokeAsync(context.SportTypeID))" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Usuń</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>


@code {
    [Parameter]
    public List<SportTypeDTO>? sportTypes { get; set; }

    [Parameter]
    public EventCallback<int> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteClick { get; set; }

    private string searchString = "";
    private bool FilterFunc(SportTypeDTO element) => FilterFuncWithSearch(element, searchString);

    private bool FilterFuncWithSearch(SportTypeDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private int? GetRowNumber(object element) =>
       sportTypes?.TakeWhile(x => x != element).Count() + 1;

}